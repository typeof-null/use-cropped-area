import { useEffect, useRef } from 'react';
export var getCroppedArea = function (image, canvas, area, scale) {
    if (scale === void 0) { scale = 1; }
    var ctx = canvas.getContext('2d');
    if (!ctx) {
        throw new Error('No 2d context');
    }
    var scaleX = image.naturalWidth / image.width;
    var scaleY = image.naturalHeight / image.height;
    var pixelRatio = window.devicePixelRatio;
    canvas.width = Math.floor(area.width * scaleX * pixelRatio);
    canvas.height = Math.floor(area.height * scaleY * pixelRatio);
    ctx.scale(pixelRatio, pixelRatio);
    ctx.imageSmoothingQuality = 'high';
    var areaX = area.x * scaleX;
    var areaY = area.y * scaleY;
    var centerX = image.naturalWidth / 2;
    var centerY = image.naturalHeight / 2;
    ctx.save();
    ctx.translate(-areaX, -areaY);
    ctx.translate(centerX, centerY);
    ctx.scale(scale, scale);
    ctx.translate(-centerX, -centerY);
    ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);
    ctx.restore();
};
function useCroppedArea(_a) {
    var area = _a.area, image = _a.image, _b = _a.visible, visible = _b === void 0 ? true : _b;
    var ref = useRef(null);
    var canvas = ref.current;
    useEffect(function () {
        if (visible && canvas && image && area) {
            getCroppedArea(image, canvas, area);
        }
    }, [visible, canvas, image, area]);
    return ref;
}
export default useCroppedArea;
//# sourceMappingURL=use-cropped-area.js.map